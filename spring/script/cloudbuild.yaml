steps:
# This step builds the container image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/$REPO_NAME:$SHORT_SHA', 'spring']
# This step pushes the image to Container Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/$REPO_NAME:$SHORT_SHA']

# This step clones the hello-cloudbuild-env repository
- name: 'gcr.io/cloud-builders/gcloud'
  id: Clone env repository
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    gcloud source repos clone $REPO_NAME 

# This step generates the new manifest
- name: 'gcr.io/cloud-builders/gcloud'
  id: Generate manifest
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    sed "s/GOOGLE_CLOUD_PROJECT/${PROJECT_ID}/g" spring/kubernetes/deployment.yml.template |  sed "s/latest/${SHORT_SHA}/g" > spring/kubernetes/deployment.yml && \
    git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)') && \
    git add spring/kubernetes/deployment.yml && \
    git commit -m "Deploying image gcr.io/${PROJECT_ID}/${REPO_NAME}:${SHORT_SHA} Built from commit ${COMMIT_SHA} of repository ${REPO_NAME} Author: $(git log --format='%an <%ae>' -n 1 HEAD)" && \
    git push origin master

# This step generates the new manifest
- name: 'gcr.io/cloud-builders/gcloud'
  id: Debug
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    ls -l spring/kubernetes/deployment.yml && \
    cat spring/kubernetes/deployment.yml

# This step deploys app on gke
- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - 'apply'
  - '-f'
  - 'spring/kubernetes/deployment.yml'
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=us-central1-c'
  - 'CLOUDSDK_CONTAINER_CLUSTER=$REPO_NAME-cluster'